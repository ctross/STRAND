% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/fit_multiplex_model_dimension_reduction.R
\name{fit_multiplex_model_dimension_reduction}
\alias{fit_multiplex_model_dimension_reduction}
\title{A function to apply combined a stochastic block and social relations model to multiplex networks using the STRAND framework}
\usage{
fit_multiplex_model_dimension_reduction(
  data,
  block_regression,
  focal_regression,
  target_regression,
  dyad_regression,
  mode = "mcmc",
  stan_mcmc_parameters = list(seed = 1, chains = 1, parallel_chains = 1, refresh = 1,
    iter_warmup = NULL, iter_sampling = NULL, max_treedepth = NULL, adapt_delta = NULL,
    init = NULL),
  priors = NULL
)
}
\arguments{
\item{data}{A data object of class STRAND, prepared using the make_strand_data() function. The data object must include all covariates used in the formulas listed below.}

\item{block_regression}{A formula for the block-level predictors. This should be specified as in lm(), e.g.: ~ Ethnicity + Sex. Dont use interactions, however.}

\item{focal_regression}{A formula for the predictors of out-degree (i.e., focal effects, or the effects of individual covariates on outgoing ties). This should be specified as in lm(), e.g.: ~ Age * Education}

\item{target_regression}{A formula for the predictors of in-degree (i.e., target effects, or the effects of individual covariates on incoming ties). This should be specified as in lm(), e.g.: ~ Age * Education}

\item{dyad_regression}{A formula for the predictors of dyadic relationships. This should be specified as in lm(), e.g.: ~ Kinship + Friendship}

\item{mode}{A string giving the mode that stan should use to fit the model. "mcmc" is default and recommended, and STRAND has functions to make processing the mcmc samples easier. Other options are "optim", to
use the optimizer provided by Stan, and "vb" to run the variational inference routine provided by Stan. "optim" and "vb" are fast and can be used for test runs. To process their output, however,
users must be familar with [cmdstanr](https://mc-stan.org/users/interfaces/cmdstan). We recommmend that users refer to the [Stan user manual](https://mc-stan.org/users/documentation/) for more information about the different modes that Stan can use.}

\item{stan_mcmc_parameters}{A list of Stan parameters that often need to be tuned. Defaults set to: list(seed = 1, chains = 1, parallel_chains = 1, refresh = 1, iter_warmup = NULL, iter_sampling = NULL, max_treedepth = NULL, adapt_delta = NULL)
We recommend 1000 sampling and warmup iterations on a single chain for exploratory model fitting. For final runs, we recommend running 2 to 4 chains for twice as long. Be sure to check r_hat, effective sample size, and traceplots.}

\item{priors}{A labeled list of priors for the model. User are only permitted to edit the values. Distributions are fixed.}
}
\value{
A STRAND model object containing the data used, and the Stan results.
}
\description{
This function allows users to analyse empirical or simulated data using a Bayesian stochastic block and social relations model in Stan. The user must supply a STRAND data object,
and a series of formulas following standard lm() style syntax. Unlike the standard multiplex model, this model is designed for dimension reduction. A single latent network is estimated,
and loadings of each multiplex layer onto the latent network are estimated.
}
\details{
It is important to note that all individual block (or group) assignment must be supplied as data.  Latent blocks or groups will be supported in future releases of STRAND.
}
\examples{
\dontrun{
fit = fit_multiplex_model_dimension_reduction(data=model_dat,
                          block_regression = ~ Ethnicity,
                          focal_regression = ~ Age * NoFood,
                          target_regression = ~ Age * NoFood,
                          dyad_regression = ~ Relatedness + Friends * SameSex,
                          mode="mcmc",
                          stan_mcmc_parameters = list(seed = 1, chains = 1, 
                            parallel_chains = 1, refresh = 1, 
                            iter_warmup = 100, iter_sampling = 100,
                            max_treedepth = NULL, adapt_delta = NULL)
                           )
}

}
