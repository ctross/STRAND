% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/fit_latent_network_plus_flows_model.R
\name{fit_latent_network_plus_flows_model}
\alias{fit_latent_network_plus_flows_model}
\title{A function to run latent network models that include flows using the STRAND framework}
\usage{
fit_latent_network_plus_flows_model(
  data = model_dat,
  fpr_regression,
  rtt_regression,
  theta_regression,
  focal_regression,
  target_regression,
  dyad_regression,
  mode = "mcmc",
  return_latent_network = FALSE,
  stan_mcmc_parameters = list(seed = 1, chains = 1, parallel_chains = 1, refresh = 1,
    iter_warmup = NULL, iter_sampling = NULL, max_treedepth = NULL, adapt_delta = NULL),
  priors = make_priors()
)
}
\arguments{
\item{data}{A data object of class STRAND, prepared using the make_strand_data() function. The data object must include all covariates used in the formulas listed below.}

\item{fpr_regression}{A formula for the predictors of false positive rate. Specified as in lm(), e.g.: ~ Age + Education}

\item{rtt_regression}{A formula for the predictors of the recall rate of true ties. Specified as in lm(), e.g.: ~ Age + Education}

\item{theta_regression}{A formula for the predictors of theta, the probability that a given individual duplicates a response from layer 1 into layer 2. Specified as in lm(), e.g.: ~ 1}

\item{focal_regression}{A formula for the predictors of out-degree (i.e., focal effects, or the effects of individual covariates on outgoing ties). This should be specified as in lm(), e.g.: ~ Age * Education}

\item{target_regression}{A formula for the predictors of in-degree (i.e., target effects, or the effects of individual covariates on incoming ties). This should be specified as in lm(), e.g.: ~ Age * Education}

\item{dyad_regression}{A formula for the predictors of dyadic relationships. This should be specified as in lm(),, e.g.: ~ Kinship + Friendship}

\item{mode}{A string giving the mode stan should use to fit the model. "mcmc" is default and recommended, and STRAND has functions to make processing the mcmc samples easier. Other options are "optim", to
use the optimizer provided by Stan, and "vb" to run the variational inference routine provided by Stan. "optim" and "vb" are fast and can be used for test runs. To process their output, however,
users must be familar with [cmdstanr](https://mc-stan.org/users/interfaces/cmdstan). We recommmend that users refer to the [Stan user manual](https://mc-stan.org/users/documentation/) for more information about the different modes that Stan can use.}

\item{return_latent_network}{An indicator for the user to specify whether latent tie probablities shoul be returned. Warning: for large networks, this option may require substantial memory.}

\item{stan_mcmc_parameters}{A list of Stan parameters that often need to be tuned. Defaults set to: list(seed = 1, chains = 1, parallel_chains = 1, refresh = 1, iter_warmup = NULL, iter_sampling = NULL, max_treedepth = NULL, adapt_delta = NULL)}

\item{priors}{A labeled list of priors for the model. Only edits of the values are permitted. Distributions are fixed.}
}
\value{
A STRAND model object containing the data used, and the Stan results.
}
\description{
This function allows a user to supply empirical or simulated data, and analyse it using a Bayesian latent network model in Stan. The user must supply a STRAND data object,
and a series of formulas following standard lm() style syntax. The self-report network data and 'true' flows (e.g., observations of exchanges or interactions) are jointly modelled.
}
\details{
It is important to note that all individuals' block (or group) assignment must be supplied as data.  Latent groups will be supported in future releases of STRAND.
}
\examples{
\dontrun{
fit = fit_latent_network_plus_flows_model( data=model_dat,
                               fpr_regression = ~ Age + Education,
                               rtt_regression = ~ Age + Education,
                               theta_regression = ~ 1,
                               focal_regression = ~ Age * NoFood,
                               target_regression = ~ Age * NoFood,
                               dyad_regression = ~ Relatedness + Friends * SameSex,
                               mode="mcmc",
                               stan_mcmc_parameters = list(seed = 1, chains = 1, parallel_chains = 1, refresh = 1, iter_warmup = 100,
                                                           iter_sampling = 100, max_treedepth = NULL, adapt_delta = NULL)
                               )
}

}
