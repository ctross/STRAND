% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/fit_NBDA_model.R
\name{fit_NBDA_model}
\alias{fit_NBDA_model}
\title{A function to run a network-based diffusion analysis using the STRAND framework}
\usage{
fit_NBDA_model(
  long_data,
  individual_focal_regression,
  social_block_regression,
  social_focal_regression,
  social_target_regression,
  social_dyad_regression,
  static_network = "auto_detect",
  network_treatment = "point",
  ces_settings = "es_inf_rts_1",
  mode = "mcmc",
  stan_mcmc_parameters = list(seed = 1, chains = 1, parallel_chains = 1, refresh = 1,
    iter_warmup = NULL, iter_sampling = NULL, max_treedepth = NULL, adapt_delta = NULL,
    init = NULL),
  priors = NULL
)
}
\arguments{
\item{long_data}{A list of data objects of class STRAND prepared using the make_strand_data() function. The data objects must include all covariates and trait diffusion data used in the formulas listed below.}

\item{individual_focal_regression}{A formula for the effects of focal predictors on individual learning rate. This should be specified as in lm(), e.g.: ~ Age * Education.}

\item{social_block_regression}{A formula for the block-level predictors of social attention weights. This should be specified as in lm(), e.g.: ~ Group + Sex. Dont use interactions, however.}

\item{social_focal_regression}{A formula for the effects of focal predictors on social attention weights. This should be specified as in lm(), e.g.: ~ Age * Education.}

\item{social_target_regression}{A formula for the effects of target predictors on social attention weights. This should be specified as in lm(), e.g.: ~ Age * Education.}

\item{social_dyad_regression}{A formula for the effects of dyadic predictors on social attention weights. This should be specified as in lm(), e.g.: ~ Kinship + Friendship.}

\item{static_network}{A string to specify if the network is static or dynamic: 'static', 'dynamic', or 'auto_detect'. Auto-detect checks if the outcome layer is identical in all timesteps. If the network is static, then a more efficient model is used if network_treatment is 'posterior'. For point estimates, this setting is ignored.}

\item{network_treatment}{How should the network be treated. Setting: 'point' instructs STRAND to take a point estimate of the network by dividing the edge weights by edge exposure to get an edge strength point estimate in the data block. Setting: 'posterior' instructs STRAND to estimate edge strength using a binomial model, and should only be used if the network is binary or binomial. Due to the long time these models take to fit if 'posterior' is used, we haven't tested these models as closely. We reccomend using 'point' until we can improve MCMC runtime for the more complicated 'posterior' version.}

\item{ces_settings}{A string: 'full' to estimate all free CES parameters, 'rts_1' to fix the returns to scale at 1, and 'es_inf_rts_1' to fix both the returns to scale at 1 and the elasticity of substitution to infinity. The last setting, 'es_inf_rts_1', is equivalant to estimating a single parameter alpha governing how much learing goes on in the 'out' versus 'in' direction.}

\item{mode}{A string giving the mode that stan should use to fit the model. "mcmc" is default and recommended, and STRAND has functions to make processing the mcmc samples easier. Other options are "optim", to
use the optimizer provided by Stan, and "vb" to run the variational inference routine provided by Stan. "optim" and "vb" are fast and can be used for test runs. To process their output, however,
users must be familar with [cmdstanr](https://mc-stan.org/users/interfaces/cmdstan). We recommmend that users refer to the [Stan user manual](https://mc-stan.org/users/documentation/) for more information about the different modes that Stan can use.}

\item{stan_mcmc_parameters}{A list of Stan parameters that often need to be tuned. Defaults set to: list(seed = 1, chains = 1, parallel_chains = 1, refresh = 1, iter_warmup = NULL, iter_sampling = NULL, max_treedepth = NULL, adapt_delta = NULL)
We recommend 1000 sampling and warmup iterations on a single chain for exploratory model fitting. For final runs, we recommend running 2 to 4 chains for twice as long. Be sure to check r_hat, effective sample size, and traceplots.}

\item{priors}{A labeled list of priors for the model. User are only permitted to edit the values. Distributions are fixed.}
}
\value{
A STRAND model object containing the data used, and the Stan results.
}
\description{
This function allows users to analyse empirical or simulated data using a NBDA model in Stan. The user must supply a list of STRAND data objects, representing a time-series of data,
and a set of formulas following standard lm() style syntax.
}
\examples{
\dontrun{
fit = fit_NBDA_model(long_data=model_dat,
                     individual_focal_regression = ~ Age * NoFood,
                     social_block_regression = ~ Ethnicity,
                     social_focal_regression = ~ Age * NoFood,
                     social_target_regression = ~ Age * NoFood,
                     social_dyad_regression = ~ Relatedness + Friends * SameSex,
                     mode="mcmc",
                     stan_mcmc_parameters = list(seed = 1, chains = 1, 
                       parallel_chains = 1, refresh = 1, 
                       iter_warmup = 100, iter_sampling = 100,
                       max_treedepth = NULL, adapt_delta = NULL)
                      )
}

}
